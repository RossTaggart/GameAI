;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;     Bot Procedures     ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to update-states ;; this is going to be the defined states which tell the tank what to do
  
  ;; this is the state that the enemy tank will begin in at setup
  if current-enemy-state = "idle"
  [ set current-enemy-state "seeking"]
  
  ;; this state is for when the enemy can neither see nor is near the player
    if current-enemy-state = "seeking"
  [ move-bot ]
  
  ;; this state is for when the enemy tank is within "x" blocks of the player and can see him
    if current-enemy-state = "attacking"
  [
    ;;ask bots [show [distance playerTank]] ;;attack the player - awaiting implementation
  ]
  
  ;; when the player hits the enemy it will set the enemy state to dead
  if current-enemy-state = "dead"
     [ user-message "YOU WON, YOU WINNER"   toggleendgame ]
end

to check-current-state ;; this is going to be the transitions between states
    
      ;; if the player is within range
      if length current-path < 10
      ;;[set current-enemy-state "attacking"] ;; to be removed and replaced with new functionality
      ;; if length < 10 and in sight - move to attacking else stay in seeking
        [
          ;;set debug-state "in range, not in sight"
          carefully
            [
              ask bots
                [
                  ;; patches ahead of turtle
                  if any? turtles-on patch-ahead 3
                  [
                    set current-enemy-state "attacking"
                    stop 
                  ]
                  
                  if any? turtles-on patch-ahead 2
                  [
                    set current-enemy-state "attacking"
                    stop 
                  ] 
                  
                  if any? turtles-on patch-ahead 1
                  [
                    set current-enemy-state "attacking"
                    stop 
                  ] 
                  
                  if not any? turtles-on patch-ahead 3
                  [
                    if not any? turtles-on patch-ahead 2
                    [
                      if not any? turtles-on patch-ahead 1
                      [
                        set current-enemy-state "seeking"
                        stop 
                      ]  
                    ] 
                  ]
                ]
            ]
          
            [
              set debug-state "edge of screen detected"
              set current-enemy-state "seeking" 
            ]
        ]
      
      if length current-path > 10
      [set current-enemy-state "seeking" set debug-state "out of range"]  
end

to input-bots  ; Observer Procedure
  find-shortest-path-to-destination
  ask bots
  [
    if length current-path != 0 ;; if the enemy tank has not caught the player
    [
      check-current-state
      update-states
    ]
    
    if length current-path = 0
    [
       user-message "YOU FAILED. Tank caught you"   toggleendgame ;; enemy tank has caught the player
    ]
  ]
end


; move to next patch in patch
to move-to-next-patch-in-current-path
  ask bots 
  [
    face first current-path
    ;move-to first current-path
    ; if distance from this turtle to the player is less than range & clear line of sight, then
    ;if distance-to-player
  ]
end

to can-shoot-player ; bot procedure
  ask bots
  [
    ; check if the closest player is within firing range
    if (distance min-one-of players[distance myself] < range)
    [
      ; check if player is in LOS
      if player-in-LOS?
      [
        ; fire
      ]
    ]
  ]
end

to-report player-in-LOS? ; bot procedure
  ; if no obstacles between bot and player AND distance is within a certain range, then LOS is true
  ;report min-one-of players[distance myself] 'isInLOS'true/false
  report true
end

to find-shortest-path-to-destination
  reset-ticks
  ask bots 
  [
    set path find-a-path patch-here one-of players
    set optimal-path path
    set current-path path
  ]
  move-bot
end

to-report find-a-path [ source-patch destination-patch] 
  ; initialize all variables to default values
  let search-done? false
  let search-path []
  let current-patch 0
  set open []
  set closed []  
  
  ; add source patch in the open list
  set open lput source-patch open
  
  ; loop until we reach the destination or the open list becomes empty
  while [ search-done? != true ]
  [    
    ifelse length open != 0
    [
      ; sort the patches in open list in increasing order of their f() values
      set open sort-by [[f] of ?1 < [f] of ?2] open
      
      ; take the first patch in the open list
      ; as the current patch (which is currently being explored (n))
      ; and remove it from the open list
      set current-patch item 0 open 
      set open remove-item 0 open
      
      ; add the current patch to the closed list
      set closed lput current-patch closed
      
      ; explore the Von Neumann (left, right, top and bottom) neighbors of the current patch
      ask current-patch
      [         
        ; if any of the neighbors is the destination stop the search process
        ifelse any? neighbors4 with [ (pxcor = [ pxcor ] of destination-patch) and (pycor = [pycor] of destination-patch)]
        [
          set search-done? true
        ]
        [
          ; the neighbors should not be obstacles or already explored patches (part of the closed list)          
          ask neighbors4 with [ pcolor != red and (not member? self closed) and (self != parent-patch) ]     
          [
            ; the neighbors to be explored should also not be the source or 
            ; destination patches or already a part of the open list (unexplored patches list)
            if not member? self open and self != source-patch and self != destination-patch
            [
              if debug?
              [
                set pcolor 45
              ]
              
              ; add the eligible patch to the open list
              set open lput self open
              
              ; update the path finding variables of the eligible patch
              ; set the parent patch before we assess a new patch
              set parent-patch current-patch 
              ; set new distance
              set g [g] of parent-patch  + 1
              ; calculate new estimate heuristic value
              set h distance destination-patch
              ; calculate patch value
              set f (g + h)
            ]
          ]
        ]
        if self != source-patch
        [
          if debug?
          [
            set pcolor 35
          ]
        ]
      ]
    ]
    [
      ; if a path is not found (search is incomplete) and the open list is exhausted 
      ; display a user message and report an empty search path list.
      user-message( "A path from the source to the destination does not exist." )
      report []
    ]
  ]
  
  ; if a path is found (search completed) add the current patch 
  ; (node adjacent to the destination) to the search path.
  set search-path lput current-patch search-path
  
  ; trace the search path from the current patch 
  ; all the way to the source patch using the parent patch
  ; variable which was set during the search for every patch that was explored
  let temp first search-path
  while [ temp != source-patch ]
  [
    ask temp
    [
      if debug?
      [
        set pcolor 85
      ]
    ]
    set search-path lput [parent-patch] of temp search-path 
    set temp [parent-patch] of temp
  ]
  
  ; add the destination patch to the front of the search path
  set search-path fput destination-patch search-path
  
  ; reverse the search path so that it starts from a patch adjacent to the
  ; source patch and ends at the destination patch
  set search-path reverse search-path  

  ; report the search path
  report search-path
end

; make the turtle traverse (move through) the path all the way to the destination patch
to move-bot
  ask bots 
  [
    if length current-path != 0
    [
      every 0.25
      [
        face first current-path
        move-to first current-path
        set current-path remove-item 0 current-path
        pd
      ]
    ]
    if length current-path = 0
    [
      pu
    ]
  ]   
end